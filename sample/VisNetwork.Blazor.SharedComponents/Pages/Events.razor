@page "/events"

@using System.Text.Json
@using VisNetwork.Blazor.Models

<h1>Events</h1>

<div>
    <Network Id="my-network" Data="@data" Options="EditorConstructionOptions"
             OnClick="NetworkOnClick" OnDoubleClick="NetworkOnDoubleClick"
             OnContext="NetworkOnContext" OnHold="NetworkOnHold" OnRelease="NetworkOnRelease" OnSelect="NetworkOnSelect"
             OnBeforeDrawing="NetworkBeforeDrawing" OnAfterDrawing="NetworkAfterDrawing" OnSelectEdge="NetworkSelectEdge"
             OnDeselectEdge="NetworkDeselectEdge" OnSelectNode="NetworkSelectNode" OnDeselectNode="NetworkDeselectNode"
             OnShowPopup="NetworkShowPopup" OnHidePopup="NetworkHidePopup" OnStartStabilizing="StartStabilizing"
             OnStabilizationProgress="StabilizationProgress" OnStabilizationIterationsDone="StabilizationIterationsDone"
             OnStabilized="Stabilized"
             class="vis-network-container" />
</div>

<div>
    <button @onclick="Clear">Clear</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Time</th>
            <th>Event</th>
            <th>Data</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var ev in events)
        {
            <tr class="@ev.CssClass">
                <td>@ev.Timestamp.ToString("hh:MM:ss fff")</td>
                <td>@ev.Name</td>
                <td>@ev.Data</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private NetworkData data;
    private List<EventData> events = new List<EventData>();

    public Events()
    {
        var nodes = new List<Node>();
        var edges = new List<Edge>();

        nodes.Add(new Node("1", "Node 1", 1, "circle"));
        nodes.Add(new Node("2", "Node 2", 2, "ellipse"));
        edges.Add(new Edge("1", "2") { Id = "1-2" });
        nodes.Add(new Node("3", "Node 3", 4, "database"));
        edges.Add(new Edge("2", "3") { Id = "2-3" });

        data = new NetworkData
            {
                Edges = edges,
                Nodes = nodes
            };
    }

    private NetworkOptions EditorConstructionOptions(Network network)
    {
        return new NetworkOptions
            {
                AutoResize = true,
                Physics = new PhysicsOptions
                {
                    Stabilization = new StabilizationOption()
                    {
                        Enabled = true,
                        UpdateInterval = 5,

                    }
                }
            };
    }

    private void AddEvent<T>(string name, T eventArg)
    {
        var serialized = SerializeArgs(eventArg);
        AddEventData(name, serialized);
    }

    private void AddEventData(string name, string data)
    {
        var eventData = new EventData { Timestamp = DateTime.Now, Name = name, Data = data, CssClass = "event-new" };
        events.ForEach(e =>
            e.CssClass = (eventData.Timestamp - e.Timestamp) < TimeSpan.FromMilliseconds(200)
                ? "event-close"
                : "event-old");

        events.Insert(0, eventData);

        if (events.Count > 500)
        {
            events.RemoveAt(events.Count - 1);
        }

        StateHasChanged();
    }

    private void Clear() => events.Clear();

    private async Task AddEventDataAsync(string name, string data)
    {
        AddEventData(name, data);
        await Task.CompletedTask;
    }

    private void NetworkSelectEdge(ClickEvent eventArg) => AddEvent("selectEdge", eventArg);

    private void NetworkDeselectEdge(DeselectClickEvent eventArg) => AddEvent("deselectEdge", eventArg);

    private void NetworkSelectNode(ClickEvent eventArg) => AddEvent("selectNode", eventArg);

    private void NetworkDeselectNode(DeselectClickEvent eventArg) => AddEvent("deselectNode", eventArg);

    private void NetworkOnClick(ClickEvent eventArg) => AddEvent("click", eventArg);

    private void NetworkOnDoubleClick(ClickEvent eventArg) => AddEvent("doubleClick", eventArg);

    private void NetworkOnContext(ClickEvent eventArg) => AddEvent("oncontext", eventArg);

    private void NetworkOnHold(ClickEvent eventArg) => AddEvent("hold", eventArg);

    private void NetworkOnRelease(ClickEvent eventArg) => AddEvent("release", eventArg);

    private void NetworkOnSelect(ClickEvent eventArg) => AddEvent("select", eventArg);

    private void NetworkBeforeDrawing(DrawingEvent eventArg) => AddEvent("beforeDrawing", eventArg);

    private void NetworkAfterDrawing(DrawingEvent eventArg) => AddEvent("afterDrawing", eventArg);

    private async Task NetworkShowPopup(string id) => await AddEventDataAsync("showPopup", id);

    private async Task NetworkHidePopup(string id) => await AddEventDataAsync("hidePopup", id);

    private async Task StartStabilizing() => await AddEventDataAsync("startStabilizing", default);

    private void StabilizationProgress(StabilizationProgressEvent eventArg) => AddEvent("stabilizationProgress", eventArg);

    private async Task StabilizationIterationsDone() => await AddEventDataAsync("stabilizationIterationsDone", default);

    private void Stabilized(StabilizedEvent eventArg) => AddEvent("stabilized", eventArg);

    private static string SerializeArgs<T>(T instance)
    {
        var jsonSerializerOptions = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            };

        return JsonSerializer.Serialize(instance, jsonSerializerOptions);
    }

    private class EventData
    {
        public DateTime Timestamp { get; set; }
        public string Name { get; set; }
        public string Data { get; set; }
        public string CssClass { get; set; }
    }
}